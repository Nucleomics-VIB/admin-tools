#!/bin/bash

# script: AddIlluminaFolders
action="AddIlluminaFolders"
actionversion="1.0; 2020-09-11"
#
# aim: add new records in the database for all new Illumina Folders found in
# ${CONF_mount_transfer_point}/${CONF_mount_transfer_path} 
# or for one or more named Illumina Folders given by -p targets=<Foldername>
# default target folders are taken from  ${CONF_illumina_folderarray}
#
# NOTE: will only scan one level and valid folders based on their name
# NEW in this version first checks if a folder is new before adding it
#     => saving big time on re-runs
# NOTE: folders existing in the DB are ignored and passed even if the data changed
# NOTE: To modify existing folders use UpdateIlluminaFolders

usage='# Usage: '${scriptname}' -a '${action}' -p targets=<FolderName> (optional) -p comment="some comment" (optional)
# example: -p targets=<Folder> or -p targets=(<F1> <F2> <F3>) -p comment="after cleanup"
# script version '${actionversion}

########################################################################
# Edit here if necessary

# creator
creator=${action}
creatorversion=${actionversion}

# default values
protection=0
status="added"
deliverydate=""
comment=""

# timestamp for tmp file
ts=$(date +%s)
# mac specific
lts=$(date -r ${ts})
# lts=$(date)

####################### no edits below this line #######################

# create a sql script file tmp/cmd_${timestamp}.sql with all commands
# then source it with :
#   sqlite3 "${databasepath}/${databasename}" ".read tmp/cmd_${timestamp}.sql"

# array of folders to scan with default to: ${CONF_illumina_folderarray}
case ${my_vars[@]} in
  "")
    targets=(${CONF_illumina_folderarray});;
  targets)
    good=1;;
  *) 
    echo "# invalid argument ${v}"
    echo "${usage}"
    exit 1
esac

mkdir -p tmp

# prepare a SQL script to import new data in the DB in a single sqlite3 session
# write script file header
echo '/*
------------------------------------------------------------------
written by '${action}'
date: '${lts}'
ts: '${ts}'
------------------------------------------------------------------
*/

PRAGMA foreign_keys = false;

' > tmp/cmd_${ts}.sql

# sqlite3 variables
databasepath=$CONF_database_path
databasename=$CONF_database_name
databasedump=$CONF_database_dump
mountpoint=$CONF_mount_transfer_point
mountpath=$CONF_mount_transfer_path

# date-tag
actiondate=$(date +%s); # seconds since 1970-01-01

# repeat for all target folder

# convert CONF_illumina_folderarray to bash array
read -a allowed <<< ${CONF_illumina_folderarray}

for platform in ${targets[*]}; do
  # check if valid platform (present in ${CONF_illumina_folderarray} )
  inArray "${platform}" "${allowed[@]}" || \
    { echo "-- ${platform} is not a valid target"; exit 1; }
  

  # find proper Illumina run folders starting with 19 or 20 (year)
  runfolders=$(find ${mountpoint}/${mountpath}/${platform} -type d -maxdepth 1 \
    | grep "^${mountpoint}/${mountpath}/${platform}/[12]")

  for runf in ${runfolders[*]}; do
    >&2 echo -n "processing ${runf}: "
    
    foldername=$(basename ${runf})
    folderpath="${mountpath}/${platform}"
  
    # check if the row already exists
    count=$(Querytable2Count Folders FolderPath=${folderpath} FolderName=${foldername})
    [ "${count}" -eq 0 ] \
    	&& { >&2 echo " | adding to the DB: "; } \
    	|| { >&2 echo "already in the DB, passing"; continue; }
  
    # decompose folder name into variables
    # eg: 190807_7001450_0488_AH3HVFBCX3_exp3209
    array=(${foldername//_/ })
    rdate=${array[0]}
    deviceid=${array[1]}
    runnum=${array[2]}
    flowcellid=${array[3]}
    projnum=${array[4]}
    deliverydate=""
    
    # restrict to last 6 digits as some folders have longer date strings YYYY io YY
    rdate="${rdate: -6}"

    # get folder size from DUC (several possible ways based on ${CONF_duc_access} !)
    case ${CONF_duc_access} in
      nuc1local)
        foldersize=$(get_folder_size_local "${mountpath}/${platform}/${foldername}")
        ;;
      nuc1ssh)
        foldersize=$(get_folder_size_nuc1 "${mountpath}/${platform}/${foldername}")
        ;;
      nuc4ssh)
        foldersize=$(get_folder_size_nuc4 "${mountpath}/${platform}/${foldername}")
        ;;
      *)
        >&2 echo "invalid CONF_duc_access options: ${CONF_duc_access} in run_config.yaml"
        exit 1
    esac

  # write to existing database ${sqlitedbpath}
  cat << END_BLOCK >> tmp/cmd_${ts}.sql
/*
------------------------------------------------------------------
adding data in Folders for '${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Folders 
  (
  Creator, 
  CreatorVersion, 
  DBAddDate, 
  FolderPath, 
  FolderName, 
  FolderSize, 
  Protection, 
  DeviceModel, 
  StartDate, 
  DeviceID, 
  RunNr, 
  FlowCellID, 
  ProjectNR, 
  Status, 
  DeliveryDate, 
  Comment
  )
VALUES (
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${folderpath}${d}, 
  ${d}${foldername}${d}, 
  ${d}${foldersize}${d}, 
  ${d}${protection}${d}, 
  ${d}${platform}${d}, 
  ${d}${rdate}${d}, 
  ${d}${deviceid}${d}, 
  ${d}${runnum}${d}, 
  ${d}${flowcellid}${d}, 
  ${d}${projnum}${d}, 
  ${d}${status}${d}, 
  ${d}${deliverydate}${d}, 
  ${d}${comment}${d}
  );

/*
------------------------------------------------------------------
adding data in Actions for ${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Actions 
  (
  FolderID,
  Creator, 
  CreatorVersion, 
  ActionDate, 
  ActionName, 
  Comment
  )
VALUES (
  last_insert_rowid(),
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${action}${d}, 
  ${d}${comment}${d}
  );

-- ----------------------------------------------------------------

END_BLOCK

  done

done

# write FOOTER in file
echo "PRAGMA foreign_keys = false;" >> tmp/cmd_${ts}.sql

# execute file and cleanup
cmd="sqlite3 ${d}${CONF_database_path}/${CONF_database_name}${d} ${d}.read ${CONF_database_path}/tmp/cmd_${ts}.sql${d};"
# echo "# ${cmd}"
eval ${cmd} && rm tmp/cmd_${ts}.sql

exit 0
