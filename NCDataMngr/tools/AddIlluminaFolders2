#!/bin/bash

# script: AddIlluminaFolders2
action="AddIlluminaFolders2"
actionversion=" 1.0; 2020-09-11"
#
# aim: add/update records in the database for all Illumina Folders found in
# ${CONF_mount_point}/${CONF_mount_path}
# default folders from  ${CONF_illumina_folderarray}
#
# NOTE: will only scan one level and valid folders based on their name

########################################################################
# Edit here if necessary

# creator
creator=${action}
creatorversion=${actionversion}

# default values
protection=0
status="done"
deliverydate=""
comment=""

# timestamp for tmp file
ts=$(date +%s)
lts=$(date -r ${ts})

####################### no edits below this line #######################

# create a sql script file tmp/cmd_${timestamp}.sql with all commands
# then source it with :
#   sqlite3 "${databasepath}/${databasename}" ".read tmp/cmd_${timestamp}.sql"

# array of folders to scan with default to: ${CONF_illumina_folderarray}
case ${my_vars[@]} in
  "")
    targets=(${CONF_illumina_folderarray});;
    
  targets)
    good=1;;
  *) 
    echo "# invalid argument ${v}"
    echo "should be '-p targets=<Folder>' or '-p targets=(<F1> <F2> <F3>)'"
    exit 1
esac


mkdir -p tmp

# write script file header
echo '/*
------------------------------------------------------------------
written by '${action}'
date: '${lts}'
ts: '${ts}'
------------------------------------------------------------------
*/

PRAGMA foreign_keys = false;

' > tmp/cmd_${ts}.sql

# sqlite3 variables
databasepath=$CONF_database_path
databasename=$CONF_database_name
databasedump=$CONF_database_dump
mountpoint=$CONF_mount_point
mountpath=$CONF_mount_path

# date-tag
actiondate=$(date +%s); # seconds since 1970-01-01

# repeat for all target folder

# convert CONF_illumina_folderarray to bash array
read -a allowed <<< ${CONF_illumina_folderarray}

for platform in ${targets[*]}; do
  # check if valid platform (present in ${CONF_illumina_folderarray} )
  inArray "${platform}" "${allowed[@]}" || \
    { echo "-- ${platform} is not a valid target"; exit 1; }
  

# find proper Illumina run folders starting with 19 or 20 (year)
  runfolders=$(find ${mountpoint}/${mountpath}/${platform} -type d -maxdepth 1 \
    | grep "^${mountpoint}/${mountpath}/${platform}/[12]")

  for runf in ${runfolders[*]}; do
    >&2 echo "procesing ${runf}"
    
    foldername=$(basename ${runf})
    folderpath="${mountpath}/${platform}"
  
    # decompose folder name into variables
    # eg: 190807_7001450_0488_AH3HVFBCX3_exp3209
    array=(${foldername//_/ })
    rdate=${array[0]}
    deviceid=${array[1]}
    runnum=${array[2]}
    flowcellid=${array[3]}
    projnum=${array[4]}
    deliverydate=""
    
    # restrict to last 6 digits as some folders have longer date strings YYYY io YY
    rdate="${rdate: -6}"

    # get folder size from DUC (several possible ways based on ${CONF_duc_access} !)
    case ${CONF_duc_access} in
      nuc1local)
        foldersize=$(get_folder_size_local "${mountpath}/${platform}/${foldername}")
        ;;
      nuc1ssh)
        foldersize=$(get_folder_size_nuc1 "${mountpath}/${platform}/${foldername}")
        ;;
      nuc4ssh)
        foldersize=$(get_folder_size_nuc4 "${mountpath}/${platform}/${foldername}")
        ;;
      *)
        >&2 echo "invalid CONF_duc_access options: ${CONF_duc_access} in run_config.yaml"
        exit 1
    esac


#     echo "#--------------------------------------"
#     echo "# Creator:        ${creator}"
#     echo "# CreatorVersion: ${creatorversion}"
#     echo "# DBAddDate:      ${actiondate}"
#     echo "# FolderPath:     ${folderpath}"
#     echo "# FolderName:     ${foldername}"
#     echo "# FolderSize:     ${foldersize}"
#     echo "# Protection:     ${protection}"
#     echo "# DeviceModel:    ${platform}"
#     echo "# RunDate:        ${rdate}"
#     echo "# DeviceID:       ${deviceid}"
#     echo "# RunNr:          ${runnum}"
#     echo "# FlowCellID:     ${flowcellid}"
#     echo "# ProjectNR:      ${projnum}"
#     echo "# Comment:        ${comment}"
#     echo "#--------------------------------------"

  # write to existing database ${sqlitedbpath}
  cat << END_BLOCK >> tmp/cmd_${ts}.sql
/*
------------------------------------------------------------------
adding data in Folders for '${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Folders 
  (
  Creator, 
  CreatorVersion, 
  DBAddDate, 
  FolderPath, 
  FolderName, 
  FolderSize, 
  Protection, 
  DeviceModel, 
  StartDate, 
  DeviceID, 
  RunNr, 
  FlowCellID, 
  ProjectNR, 
  Status, 
  DeliveryDate, 
  Comment
  )
VALUES (
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${folderpath}${d}, 
  ${d}${foldername}${d}, 
  ${d}${foldersize}${d}, 
  ${d}${protection}${d}, 
  ${d}${platform}${d}, 
  ${d}${rdate}${d}, 
  ${d}${deviceid}${d}, 
  ${d}${runnum}${d}, 
  ${d}${flowcellid}${d}, 
  ${d}${projnum}${d}, 
  ${d}${status}${d}, 
  ${d}${deliverydate}${d}, 
  ${d}${comment}${d}
  );

/*
------------------------------------------------------------------
adding data in Actions for ${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Actions 
  (
  FolderID,
  Creator, 
  CreatorVersion, 
  ActionDate, 
  ActionName, 
  Comment
  )
VALUES (
  last_insert_rowid(),
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${action}${d}, 
  ${d}${comment}${d}
  );

-- ----------------------------------------------------------------

END_BLOCK

  done

done

# write FOOTER in file
echo "PRAGMA foreign_keys = false;" >> tmp/cmd_${ts}.sql

# execute file and cleanup
cmd="sqlite3 ${d}${CONF_database_path}/${CONF_database_name}${d} ${d}.read ${CONF_database_path}/tmp/cmd_${ts}.sql${d};"
# echo "# ${cmd}"
eval ${cmd}

exit 0
