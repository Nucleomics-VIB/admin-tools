#!/bin/bash

# script: AddGridIonFolders
action="AddGridIonFolders"
actionversion="1.0; 2020-09-28"
#
# aim: add/update records in the database for all Illumina Folders found in
# ${CONF_mount_point}/${CONF_mount_path}
# default folders from  ${CONF_illumina_folderarray}
#
# NOTE: will only scan one level and valid folders based on their name
# NEW in this version first checks if a folder is new before adding it

########################################################################
# Edit here if necessary

# creator
creator=${action}
creatorversion=${actionversion}

# default values
protection=0
status="done"
deliverydate=""
comment=""
runnum=""
CustomField1=""
CustomField2=""

# timestamp for tmp file
ts=$(date +%s)
lts=$(date -r ${ts})

####################### no edits below this line #######################

# create a sql script file tmp/cmd_${timestamp}.sql with all commands
# then source it with :
#   sqlite3 "${databasepath}/${databasename}" ".read tmp/cmd_${timestamp}.sql"

mkdir -p tmp

# write script file header
echo '/*
------------------------------------------------------------------
written by '${action}'
date: '${lts}'
ts: '${ts}'
------------------------------------------------------------------
*/

PRAGMA foreign_keys = false;

' > tmp/cmd_${ts}.sql

# sqlite3 variables
databasepath=${CONF_database_path}
databasename=${CONF_database_name}
databasedump=${CONF_database_dump}
mountpoint=${CONF_mount_point}
mountpath=${CONF_mount_path}
platform=${CONF_ont_gridion}

# date-tag
actiondate=$(date +%s); # seconds since 1970-01-01

# find proper PacBio run folders matching 20190730_1356_GA20000_FAJ17947_9bdb0878_exp3166
  runfolders=$(find ${mountpoint}/${mountpath}/${platform} -mindepth 2 -maxdepth 2 -type d -regex ".*/[0-9]*_[0-9]*_[A-Z0-9]*_[A-Z0-9]*_[a-z0-9]*.*" | sort -h)

  for runf in ${runfolders[*]}; do
    >&2 echo -n "procesing ${runf}: "
    
    foldername=$(basename ${runf})
    folderpath=$(dirname ${runf})
    folderpath=${folderpath#${mountpoint}/}
    # reset to default when changed by last loop
    platform=${CONF_ont_gridion}

    # check if the row already exists
    count=$(Querytable2Count Folders FolderPath=${folderpath} FolderName=${foldername})
    [ "${count}" -eq 0 ] \
    	&& { echo "adding to the DB"; } \
    	|| { echo "already in the DB, passing"; continue; }
  
    # decompose folder name into variables
    # eg MinIon:  20170824_1308_MN17294_FAH23035_na_exp2741
    # eg gridIon: 20190627_1343_GA50000_FAH81691_667917f3_exp3201.1-2
    array=(${foldername//_/ })
    rdate=${array[0]}
    rtime=${array[1]}
    position=${array[2]}
    flowcellid=${array[3]}
    short_protocol_run_id=${array[4]}
    projnum=${array[5]}
    deliverydate=""

    # link gridIon device by date
    # device change end 2019-10-16 from GXB01104 to GXB02041
    if [ ${rdate} -lt 20191016 ]; then
      deviceid=${CONF_ont_gridionid1}
    else
      deviceid=${CONF_ont_gridionid2}
    fi

    # handle Minion run where position is of the kind: MN[0-9]*
    stringContains "MN[0-9]*" ${position} && { platform="Minion"; deviceid=${position}; position="na"; }

    # get folder size from DUC (several possible ways based on ${CONF_duc_access} !)
    case ${CONF_duc_access} in
      nuc1local)
        foldersize=$(get_folder_size_local "${mountpath}/${platform}/${foldername}")
        ;;
      nuc1ssh)
        foldersize=$(get_folder_size_nuc1 "${mountpath}/${platform}/${foldername}")
        ;;
      nuc4ssh)
        foldersize=$(get_folder_size_nuc4 "${mountpath}/${platform}/${foldername}")
        ;;
      *)
        >&2 echo "invalid CONF_duc_access options: ${CONF_duc_access} in run_config.yaml"
        exit 1
    esac


  # write to existing database ${sqlitedbpath}
  cat << END_BLOCK >> tmp/cmd_${ts}.sql
/*
------------------------------------------------------------------
adding data in Folders for '${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Folders 
  (
  Creator, 
  CreatorVersion, 
  DBAddDate, 
  FolderPath, 
  FolderName, 
  FolderSize, 
  Protection, 
  DeviceModel, 
  StartDate, 
  DeviceID, 
  RunNr, 
  FlowCellID, 
  ProjectNR, 
  CustomField1
  CustomField2
  Status, 
  DeliveryDate, 
  Comment
  )
VALUES (
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${folderpath}${d}, 
  ${d}${foldername}${d}, 
  ${d}${foldersize}${d}, 
  ${d}${protection}${d}, 
  ${d}${platform}_${position}${d}, 
  ${d}${rdate}_${rtime}${d}, 
  ${d}${deviceid}${d}, 
  ${d}${runnum}${d}, 
  ${d}${flowcellid}${d}, 
  ${d}${projnum}${d}, 
  ${d}${short_protocol_run_id}${d},
  ${d}${CustomField2}${d},
  ${d}${status}${d}, 
  ${d}${deliverydate}${d}, 
  ${d}${comment}${d}
  );

/*
------------------------------------------------------------------
adding data in Actions for ${folderpath}/${foldername}
------------------------------------------------------------------
*/

INSERT OR IGNORE INTO Actions 
  (
  FolderID,
  Creator, 
  CreatorVersion, 
  ActionDate, 
  ActionName, 
  Comment
  )
VALUES (
  last_insert_rowid(),
  ${d}${creator}${d}, 
  ${d}${creatorversion}${d}, 
  ${d}${actiondate}${d}, 
  ${d}${action}${d}, 
  ${d}${comment}${d}
  );

-- ----------------------------------------------------------------

END_BLOCK

  done

# write FOOTER in file
echo "PRAGMA foreign_keys = false;" >> tmp/cmd_${ts}.sql

# execute file and cleanup
cmd="sqlite3 ${d}${CONF_database_path}/${CONF_database_name}${d} ${d}.read ${CONF_database_path}/tmp/cmd_${ts}.sql${d};"
# echo "# ${cmd}"
eval ${cmd} \
 && rm tmp/cmd_${ts}.sql

exit 0
